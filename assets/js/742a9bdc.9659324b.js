"use strict";(self.webpackChunkdasarpemrogramanrust=self.webpackChunkdasarpemrogramanrust||[]).push([[7988],{3905:(a,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>k});var t=n(7294);function i(a,e,n){return e in a?Object.defineProperty(a,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):a[e]=n,a}function r(a,e){var n=Object.keys(a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(a);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),n.push.apply(n,t)}return n}function l(a){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){i(a,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(a,e,Object.getOwnPropertyDescriptor(n,e))}))}return a}function p(a,e){if(null==a)return{};var n,t,i=function(a,e){if(null==a)return{};var n,t,i={},r=Object.keys(a);for(t=0;t<r.length;t++)n=r[t],e.indexOf(n)>=0||(i[n]=a[n]);return i}(a,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(a);for(t=0;t<r.length;t++)n=r[t],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(a,n)&&(i[n]=a[n])}return i}var s=t.createContext({}),u=function(a){var e=t.useContext(s),n=e;return a&&(n="function"==typeof a?a(e):l(l({},e),a)),n},d=function(a){var e=u(a.components);return t.createElement(s.Provider,{value:e},a.children)},m={inlineCode:"code",wrapper:function(a){var e=a.children;return t.createElement(t.Fragment,{},e)}},o=t.forwardRef((function(a,e){var n=a.components,i=a.mdxType,r=a.originalType,s=a.parentName,d=p(a,["components","mdxType","originalType","parentName"]),o=u(n),k=i,c=o["".concat(s,".").concat(k)]||o[k]||m[k]||r;return n?t.createElement(c,l(l({ref:e},d),{},{components:n})):t.createElement(c,l({ref:e},d))}));function k(a,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof a||i){var r=n.length,l=new Array(r);l[0]=o;var p={};for(var s in e)hasOwnProperty.call(e,s)&&(p[s]=e[s]);p.originalType=a,p.mdxType="string"==typeof a?a:i,l[1]=p;for(var u=2;u<r;u++)l[u]=n[u];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}o.displayName="MDXCreateElement"},8046:(a,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>p,toc:()=>u});var t=n(7462),i=(n(7294),n(3905));const r={sidebar_position:37,title:"A.37. Traits \u279c Advanced",sidebar_label:"A.37. Traits \u279c Advanced"},l=void 0,p={unversionedId:"basic/advanced-traits",id:"basic/advanced-traits",title:"A.37. Traits \u279c Advanced",description:"Chapter ini merupakan kelanjutan dari chapter sebelumnya. Di sini kita fokus ke pembuatan local trait, macam-macam implementasi traits, traits bound syntax, associated types, dan topik yang masih relevan dengan traits lainnya.",source:"@site/docs/basic/advanced-traits.md",sourceDirName:"basic",slug:"/basic/advanced-traits",permalink:"/basic/advanced-traits",draft:!1,tags:[],version:"current",sidebarPosition:37,frontMatter:{sidebar_position:37,title:"A.37. Traits \u279c Advanced",sidebar_label:"A.37. Traits \u279c Advanced"},sidebar:"tutorialSidebar",previous:{title:"A.36. Traits",permalink:"/basic/traits"},next:{title:"A.38. Generics",permalink:"/basic/generics"}},s={},u=[{value:"A.37.1. Membuat custom trait (local trait)",id:"a371-membuat-custom-trait-local-trait",level:2},{value:"\u25c9 Method <code>pow</code> untuk operasi pangkat",id:"-method-pow-untuk-operasi-pangkat",level:3},{value:"\u25c9 Keyword <code>as</code> untuk casting tipe data",id:"-keyword-as-untuk-casting-tipe-data",level:3},{value:"A.37.2. Trait sebagai tipe parameter",id:"a372-trait-sebagai-tipe-parameter",level:2},{value:"A.37.3. Parameter bertipe lebih dari 1 trait",id:"a373-parameter-bertipe-lebih-dari-1-trait",level:2},{value:"A.37.4. Trait bound syntax",id:"a374-trait-bound-syntax",level:2},{value:"A.37.5. Trait <code>where</code> clause",id:"a375-trait-where-clause",level:2},{value:"A.37.6. Trait sebagai return type",id:"a376-trait-sebagai-return-type",level:2},{value:"A.37.7. <em>Associated types</em> pada trait",id:"a377-associated-types-pada-trait",level:2},{value:"A.37.8. Attribute <code>derive</code>",id:"a378-attribute-derive",level:2},{value:"Catatan chapter \ud83d\udcd1",id:"catatan-chapter-",level:2},{value:"\u25c9 Source code praktik",id:"-source-code-praktik",level:3},{value:"\u25c9 Work in progress",id:"-work-in-progress",level:3},{value:"\u25c9 Referensi",id:"-referensi",level:3}],d={toc:u};function m(a){let{components:e,...r}=a;return(0,i.kt)("wrapper",(0,t.Z)({},d,r,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Chapter ini merupakan kelanjutan dari chapter sebelumnya. Di sini kita fokus ke pembuatan local trait, macam-macam implementasi traits, traits bound syntax, associated types, dan topik yang masih relevan dengan traits lainnya."),(0,i.kt)("p",null,"Pembahasan lanjutan mengenai traits ini cukup panjang. Makin mendekati akhir pembahasan, makin berat topik yang dibahas. Penulis anjurkan jika diperlukan, silakan mengulang-ulang chapter ini, atau bisa lanjut ke chapter berikutnya dan nanti kembali lagi ke sini ketika sudah siap."),(0,i.kt)("h2",{id:"a371-membuat-custom-trait-local-trait"},"A.37.1. Membuat custom trait (local trait)"),(0,i.kt)("p",null,"Pada bagian ini kita akan belajar tentang cara membuat definisi trait di local crate dalam project yang sedang dikerjakan."),(0,i.kt)("p",null,"Masih sama dengan sebelum-sebelumnya, pembelajaran dilakukan dengan praktik. Kita gunakan skenario praktik berikut pada program selanjutnya:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Buat struct bernama ",(0,i.kt)("inlineCode",{parentName:"li"},"Circle"),"."),(0,i.kt)("li",{parentName:"ol"},"Buat struct bernama ",(0,i.kt)("inlineCode",{parentName:"li"},"Square"),"."),(0,i.kt)("li",{parentName:"ol"},"Buat trait bernama ",(0,i.kt)("inlineCode",{parentName:"li"},"Area")," dengan isi satu buah method untuk menghitung luas bangun datar (method ",(0,i.kt)("inlineCode",{parentName:"li"},"calculate_area()"),")."),(0,i.kt)("li",{parentName:"ol"},"Implementasikan trait ",(0,i.kt)("inlineCode",{parentName:"li"},"Area")," ke dua struct tersebut.")),(0,i.kt)("p",null,"Ok, mari mulai praktikkan skenario di atas. Pertama siapkan project dengan struktur berikut:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="package source code structure"',title:'"package',source:!0,code:!0,'structure"':!0},"my_package\n\u2502\u2500\u2500\u2500 Cargo.toml\n\u2514\u2500\u2500\u2500 src\n     \u2502\u2500\u2500\u2500 calculation_spec.rs\n     \u2502\u2500\u2500\u2500 two_dimensional.rs\n     \u2514\u2500\u2500\u2500 main.rs\n")),(0,i.kt)("p",null,"Module ",(0,i.kt)("inlineCode",{parentName:"p"},"calculation_spec")," berisi definisi trait ",(0,i.kt)("inlineCode",{parentName:"p"},"Area"),". Trait ini punya visibility akses publik, isinya hanya satu buah definisi method header bernama ",(0,i.kt)("inlineCode",{parentName:"p"},"calculate_area()"),". Trait ini nantinya diimplementasikan ke struct ",(0,i.kt)("inlineCode",{parentName:"p"},"Circle")," dan juga ",(0,i.kt)("inlineCode",{parentName:"p"},"Square"),", agar nantinya kedua struct tersebut memiliki method ",(0,i.kt)("inlineCode",{parentName:"p"},"calculate_area()")," yang berguna untuk kalkulasi luas bangun datar 2d."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="src/calculation_spec.rs"',title:'"src/calculation_spec.rs"'},"pub trait Area {\n    fn calculate_area(&self) -> f64;\n}\n")),(0,i.kt)("p",null,"Kemudian siapkan file ",(0,i.kt)("inlineCode",{parentName:"p"},"two_dimensional"),", isinya dua buah struct: ",(0,i.kt)("inlineCode",{parentName:"p"},"Circle")," dan ",(0,i.kt)("inlineCode",{parentName:"p"},"Square"),". Pada file yang sama, siapkan juga block kode implementasi trait ",(0,i.kt)("inlineCode",{parentName:"p"},"Area"),". Dengan ini maka kedua struct tersebut wajib untuk memiliki method bernama ",(0,i.kt)("inlineCode",{parentName:"p"},"calculate_area()")," dengan isi adalah operasi perhitungan aritmatika untuk mencari luas bangun datar."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="src/two_dimensional.rs"',title:'"src/two_dimensional.rs"'},"pub struct Circle {\n    pub radius: i32,\n}\n\nimpl crate::calculation_spec::Area for Circle {\n    fn calculate_area(&self) -> f64 {\n        // PI * (r ^ 2)\n        // ada operasi casting ke tipe f64 karena self.radius bertipe i32\n        3.14 * (self.radius.pow(2) as f64)\n    }\n}\n\npub struct Square {\n    pub length: i32,\n}\n\nimpl crate::calculation_spec::Area for Square {\n    fn calculate_area(&self) -> f64 {\n        // (s ^ 2)\n        // ada operasi casting ke tipe f64 karena self.length bertipe i32\n        self.length.pow(2) as f64\n    }\n}\n")),(0,i.kt)("p",null,"Bisa dilihat pada kode di atas, deklarasi struct beserta property memiliki visibility publik. Idealnya, saat sturct tersebut digunakan di fungsi ",(0,i.kt)("inlineCode",{parentName:"p"},"main")," nantinya tidak akan ada error terkait visibility akses."),(0,i.kt)("p",null,"Selanjutnya, pada file ",(0,i.kt)("inlineCode",{parentName:"p"},"main.rs")," siapkan kode yang isinya registrasi module ",(0,i.kt)("inlineCode",{parentName:"p"},"calculate_spec")," dan ",(0,i.kt)("inlineCode",{parentName:"p"},"two_dimensional"),", juga definisi fungsi ",(0,i.kt)("inlineCode",{parentName:"p"},"main")," dengan isi statement pembuatan 2 variabel object untuk masing-masing tipe data struct ",(0,i.kt)("inlineCode",{parentName:"p"},"Circle")," dan ",(0,i.kt)("inlineCode",{parentName:"p"},"Square"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="src/main.rs"',title:'"src/main.rs"'},'mod calculation_spec;\nmod two_dimensional;\n\nfn main() {\n    let circle_one = two_dimensional::Circle{ radius: 10 };\n    println!("circle area: {}", circle_one.calculate_area());\n\n    let square_one = two_dimensional::Square{ length: 5 };\n    println!("square area: {}", square_one.calculate_area());\n}\n')),(0,i.kt)("p",null,"Method ",(0,i.kt)("inlineCode",{parentName:"p"},"calculate_area()")," milik object bertipe ",(0,i.kt)("inlineCode",{parentName:"p"},"Circle")," dan ",(0,i.kt)("inlineCode",{parentName:"p"},"Square")," diakses untuk kemudian di-print."),(0,i.kt)("p",null,"Coba jalankan program."),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"eager",fetchpriority:"high",alt:"Trait",src:n(4176).Z,width:"655",height:"756"})),(0,i.kt)("p",null,"Hmm, error. Padahal trait ",(0,i.kt)("inlineCode",{parentName:"p"},"Area")," sudah publik, dan struct ",(0,i.kt)("inlineCode",{parentName:"p"},"Circle")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"Square")," beserta property-nya juga sudah publik. Tapi masih error."),(0,i.kt)("p",null,"Error ini disebabkan oleh trait ",(0,i.kt)("inlineCode",{parentName:"p"},"Area")," yang belum di-import di crate root (main). Meskipun kita tidak mengakses trait tersebut secara langsung (melainkan via method ",(0,i.kt)("inlineCode",{parentName:"p"},"calculate_area()")," milik struct ",(0,i.kt)("inlineCode",{parentName:"p"},"Circle")," dan ",(0,i.kt)("inlineCode",{parentName:"p"},"Square"),"), diharuskan untuk meng-import-nya juga."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Detail error beserta solusi dari error ini sebenarnya bisa dilihat di error message. Bagaimana Rust menginformasikan error sangat luar biasa informatif.")),(0,i.kt)("p",null,"Ok, sekarang ubah isi file ",(0,i.kt)("inlineCode",{parentName:"p"},"main.rs")," menjadi seperti ini, kemudian jalankan ulang program. Hasilnya tidak ada error."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="src/main.rs"',title:'"src/main.rs"'},'mod calculation_spec;\nmod two_dimensional;\n\nuse crate::calculation_spec::Area; // <------- tambahkan statement import module\n\nfn main() {\n    let circle_one = two_dimensional::Circle{ radius: 10 };\n    println!("circle area: {}", circle_one.calculate_area());\n\n    let square_one = two_dimensional::Square{ length: 5 };\n    println!("square area: {}", square_one.calculate_area());\n}\n')),(0,i.kt)("p",null,"O iya, ada beberapa hal baru pada penerapan kode di atas, berikut adalah pembahasannya:"),(0,i.kt)("h3",{id:"-method-pow-untuk-operasi-pangkat"},"\u25c9 Method ",(0,i.kt)("inlineCode",{parentName:"h3"},"pow")," untuk operasi pangkat"),(0,i.kt)("p",null,"Method ",(0,i.kt)("inlineCode",{parentName:"p"},"pow")," adalah item milik tipe data numerik (",(0,i.kt)("inlineCode",{parentName:"p"},"i8"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"i16"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"i32"),", ...) yang fungsinya untuk operasi pangkat."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"3.pow(2); // ===> 3 pangkat 2\n8.pow(5); // ===> 8 pangkat 5\n")),(0,i.kt)("h3",{id:"-keyword-as-untuk-casting-tipe-data"},"\u25c9 Keyword ",(0,i.kt)("inlineCode",{parentName:"h3"},"as")," untuk casting tipe data"),(0,i.kt)("p",null,"Keyword ",(0,i.kt)("inlineCode",{parentName:"p"},"as")," digunakan untuk casting tipe data. Keyword ini bisa diterapkan pada beberapa jenis tipe data, salah satunya adalah semua tipe data numerik."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"1024 as f32; // ===> 1024 dikonversi ke tipe f32, hasinya adalah 1024.0\n3.14 as i32; // ===> 3.14 dikonversi ke tipe i32, hasinya 3 karena ada pembulatan\n")),(0,i.kt)("h2",{id:"a372-trait-sebagai-tipe-parameter"},"A.37.2. Trait sebagai tipe parameter"),(0,i.kt)("p",null,"Trait bisa digunakan sebagai tipe data parameter sebuah fungsi, contoh notasi penulisannya bisa dilihat pada kode berikut:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'fn calculate_and_print_result(name: String, item: &impl Area) {\n    println!("{} area: {}", name, item.calculate_area());\n}\n')),(0,i.kt)("p",null,"Manfaat penerapan trait sebagai tipe data parameter fungsi adalah saat pemanggilan fungsi, parameter tersebut bisa diisi dengan argument data bertipe apapun dengan catatan tipe dari data tersebut mengimplementasikan trait yang sama dengan yang digunakan pada parameter."),(0,i.kt)("p",null,"Contohnya seperti pada fungsi ",(0,i.kt)("inlineCode",{parentName:"p"},"calculate_and_print_result")," di atas yang parameter ke-2 bertipe ",(0,i.kt)("inlineCode",{parentName:"p"},"&impl Area"),", nantinya saat fungsi tersebut dipanggil, kita bisa sisipi parameter ke-2 dengan object ",(0,i.kt)("inlineCode",{parentName:"p"},"circle_one")," ataupun ",(0,i.kt)("inlineCode",{parentName:"p"},"circle_two"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let circle_one = two_dimensional::Circle{ radius: 10 };\ncalculate_and_print_result("circle".to_string(), &circle_one);\n\nlet square_one = two_dimensional::Square{ length: 5 };\ncalculate_and_print_result("square".to_string(), &square_one);\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"&impl Area")," ini tipe data pointer ya, tipe non-pointer-nya adalah ",(0,i.kt)("inlineCode",{parentName:"p"},"impl Area"),". Di sini digunakan tipe data pointer untuk antisipasi ",(0,i.kt)("em",{parentName:"p"},"move semantics")," pada tipe data custom type (borrowing).")),(0,i.kt)("h2",{id:"a373-parameter-bertipe-lebih-dari-1-trait"},"A.37.3. Parameter bertipe lebih dari 1 trait"),(0,i.kt)("p",null,"Bagaimana jika, parameter fungsi ",(0,i.kt)("inlineCode",{parentName:"p"},"item")," di atas tipenya bisa lebih dari 1 trait, misalnya trait ",(0,i.kt)("inlineCode",{parentName:"p"},"Area")," dan ",(0,i.kt)("inlineCode",{parentName:"p"},"Circumference"),", apakah bisa? Jawabannya bisa."),(0,i.kt)("p",null,"Mari praktikkan. Lakukan modifikasi berikut pada beberapa kode yang telah di tulis."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"File ",(0,i.kt)("inlineCode",{parentName:"p"},"src/calculation_spec.rs")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"// ...\n\n// tambahkan \u2b07\ufe0f\n\npub trait Circumference {\n    fn calculate_circumference(&self) -> f64;\n}\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"File ",(0,i.kt)("inlineCode",{parentName:"p"},"src/two_dimensional.rs")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"// ...\n\n// tambahkan \u2b07\ufe0f\n\nimpl crate::calculation_spec::Circumference for Circle {\n    fn calculate_circumference(&self) -> f64 {\n        2.0 * 3.14 * (self.radius) as f64\n    }\n}\n\nimpl crate::calculation_spec::Circumference for Square {\n    fn calculate_circumference(&self) -> f64 {\n        4.0 * (self.length) as f64\n    }\n}\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"File ",(0,i.kt)("inlineCode",{parentName:"p"},"src/main.rs")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'// ...\n\n// tambahkan \u2b07\ufe0f\n\nuse crate::calculation_spec::Circumference;\n\n// ...\n\nfn calculate_and_print_result(name: String, item: &(impl Area + Circumference)) {\n    println!("{} area: {}", name, item.calculate_area());\n    println!("{} circumference: {}", name, item.calculate_circumference());\n}\n')))),(0,i.kt)("p",null,"Dengan perubahan kode yang telah dilakukan di atas, parameter ",(0,i.kt)("inlineCode",{parentName:"p"},"item")," milik fungsi ",(0,i.kt)("inlineCode",{parentName:"p"},"calculate_and_print_result()")," bisa diisi dengan nilai argument apapun asalkan memenuhi kriteria tipe yang ditentukan, yaitu: haruse meng-implement trait ",(0,i.kt)("inlineCode",{parentName:"p"},"Area")," dan trait ",(0,i.kt)("inlineCode",{parentName:"p"},"Circumference"),"."),(0,i.kt)("p",null,"Notasi penulisan tipe-datanya ",(0,i.kt)("inlineCode",{parentName:"p"},"&(impl Trait1 + Trait2 + Trait3 + ...)"),"."),(0,i.kt)("h2",{id:"a374-trait-bound-syntax"},"A.37.4. Trait bound syntax"),(0,i.kt)("p",null,"Penerapan trait sebagai parameter fungsi juga bisa dituliskan dalam notasi yang memanfaatkan generic. Teknik penulisan ini disebut dengan ",(0,i.kt)("em",{parentName:"p"},"trait bound syntax"),"."),(0,i.kt)("p",null,"Contohnya bisa dilihat pada kode berikut. Ada generic bernama ",(0,i.kt)("inlineCode",{parentName:"p"},"T")," yang merepresentasikan trait ",(0,i.kt)("inlineCode",{parentName:"p"},"Area"),", kemudian pada definisi parameter ke-2 fungsi (yaitu parameter ",(0,i.kt)("inlineCode",{parentName:"p"},"item"),") tipenya menggunakan ",(0,i.kt)("inlineCode",{parentName:"p"},"&T"),". Tipe ",(0,i.kt)("inlineCode",{parentName:"p"},"&T")," di sini adalah ekuivalen dengan ",(0,i.kt)("inlineCode",{parentName:"p"},"&impl Area"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'fn calculate_and_print_result2<T: Area>(name: String, item: &T) {\n    println!("{} area: {}", name, item.calculate_area());\n}\n')),(0,i.kt)("p",null,"Jika ada lebih dari satu trait yang digunakan sebagai tipe data paramater, maka penulisannya seperti ini:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'fn calculate_and_print_result3<T: Area + Circumference>(name: String, item: &T) {\n    println!("{} area: {}", name, item.calculate_area());\n    println!("{} circumference: {}", name, item.calculate_circumference());\n}\n')),(0,i.kt)("p",null,"Satu tambahan contoh lagi untuk ilustrasi yang lebih kompleks:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"fn some_function<T: Display + Clone, U: Clone + Debug>(t: &T, u: &U) -> i32 {\n    // ...\n}\n")),(0,i.kt)("p",null,"Pada contoh di atas fungsi ",(0,i.kt)("inlineCode",{parentName:"p"},"some_function()")," memiliki 2 generics param, yaitu ",(0,i.kt)("inlineCode",{parentName:"p"},"T")," dan ",(0,i.kt)("inlineCode",{parentName:"p"},"U"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T")," merepresentasikan trait ",(0,i.kt)("inlineCode",{parentName:"li"},"Display")," dan ",(0,i.kt)("inlineCode",{parentName:"li"},"Clone")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"U")," merepresentasikan trait ",(0,i.kt)("inlineCode",{parentName:"li"},"Clone")," dan ",(0,i.kt)("inlineCode",{parentName:"li"},"Debug"))),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Lebih jelasnya mengenai generics dibahas pada chapter ",(0,i.kt)("a",{parentName:"p",href:"/basic/generics"},"Generics"))),(0,i.kt)("h2",{id:"a375-trait-where-clause"},"A.37.5. Trait ",(0,i.kt)("inlineCode",{parentName:"h2"},"where")," clause"),(0,i.kt)("p",null,"Ada lagi alternatif penulisan trait bound syntax, yaitu menggunakan keyword ",(0,i.kt)("inlineCode",{parentName:"p"},"where"),". Contoh pengaplikasiannya bisa dilihat pada kode berikut. Semua definisi fungsi di bawah ini adalah ekuivalen."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'fn calculate_and_print_result4<T>(name: String, item: &T) where T: Area + Circumference {\n    println!("{} area: {}", name, item.calculate_area());\n}\n\nfn calculate_and_print_result5<T>(name: String, item: &T)\nwhere\n    T: Area + Circumference,\n    // ... other generic params if exists\n{\n    println!("{} area: {}", name, item.calculate_area());\n}\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Lebih jelasnya mengenai generics dibahas pada chapter ",(0,i.kt)("a",{parentName:"p",href:"/basic/generics"},"Generics"))),(0,i.kt)("h2",{id:"a376-trait-sebagai-return-type"},"A.37.6. Trait sebagai return type"),(0,i.kt)("p",null,"Trait bisa juga digunakan sebagai tipe data return value. Caranya gunakan notasi penulisan ",(0,i.kt)("inlineCode",{parentName:"p"},"impl NamaTrait")," sebagai tipe data."),(0,i.kt)("p",null,"Contohnya bisa dilihat pada kode berikut. Ada dua fungsi baru dideklarasikan:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Fungsi ",(0,i.kt)("inlineCode",{parentName:"li"},"new_circle")," dengan return type adalah ",(0,i.kt)("inlineCode",{parentName:"li"},"impl Area"),", dan data yang dikembalikan adalah bertipe ",(0,i.kt)("inlineCode",{parentName:"li"},"two_dimensional::Circle"),"."),(0,i.kt)("li",{parentName:"ol"},"Fungsi ",(0,i.kt)("inlineCode",{parentName:"li"},"new_square")," dengan return type adalah ",(0,i.kt)("inlineCode",{parentName:"li"},"impl Area + Circumference"),", dan data yang dikembalikan adalah bertipe ",(0,i.kt)("inlineCode",{parentName:"li"},"two_dimensional::Square"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n    let circle_one = new_circle(5);\n    calculate_and_print_result6("circle".to_string(), &circle_one);\n\n    let square_one = new_square(10);\n    calculate_and_print_result7("square".to_string(), &square_one);\n}\n\nfn new_circle(radius: i32) -> impl Area {\n    let data = two_dimensional::Circle{\n        radius\n    };\n    data\n}\n\nfn new_square(length: i32) -> impl Area + Circumference {\n    two_dimensional::Square{\n        length\n    }\n}\n\nfn calculate_and_print_result6<T>(name: String, item: &T)\nwhere\n    T: Area,\n{\n    println!("{} area: {}", name, item.calculate_area());\n}\n\nfn calculate_and_print_result7<T>(name: String, item: &T)\nwhere\n    T: Area + Circumference,\n{\n    println!("{} area: {}", name, item.calculate_area());\n    println!("{} circumference: {}", name, item.calculate_circumference());\n}\n')),(0,i.kt)("p",null,"Salah satu konsekuensi dalam penerapan trait sebagai return type adalah: tipe data milik nilai yang dikembalikan terdeteksi sebagai tipe trait. Contohnya variabel ",(0,i.kt)("inlineCode",{parentName:"p"},"circle_one")," di atas, tipe data-nya bukan ",(0,i.kt)("inlineCode",{parentName:"p"},"Circle"),", melainkan ",(0,i.kt)("inlineCode",{parentName:"p"},"impl Area"),"."),(0,i.kt)("p",null,"Tipe data aslinya tetap bisa diakses, tapi butuh tambahan effort. Lebih jelasnya dibahas pada chapter ",(0,i.kt)("a",{parentName:"p",href:"#/wip/trait-conversion-from-into"},"Trait \u279c Conversion (From & Into)"),"."),(0,i.kt)("h2",{id:"a377-associated-types-pada-trait"},"A.37.7. ",(0,i.kt)("em",{parentName:"h2"},"Associated types")," pada trait"),(0,i.kt)("p",null,"Associated types adalah tipe data yang didefinisikan di dalam suatu trait. Associated types tidak tidak memiliki tipe data konkret saat didefinisikan, namun ketika trait diimplementasikan maka tipe tersebut harus ditentukan tipe data konkretnya."),(0,i.kt)("p",null,"Lebih jelas silakan perhatikan kode berikut:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"trait Shape {\n    type Area;\n\n    fn area(&self) -> Self::Area;\n}\n")),(0,i.kt)("p",null,"Pada definisi trait ",(0,i.kt)("inlineCode",{parentName:"p"},"Shape")," di atas, yang disebut dengan associated types adalah tipe ",(0,i.kt)("inlineCode",{parentName:"p"},"Area")," yang definisinya berada dalam block trait. Tipe didefinisikan tanpa assignment operator, jadi tidak ada tipe data konkretnya."),(0,i.kt)("p",null,"Associated types ini sering digunakan pada Rust programming."),(0,i.kt)("p",null,"Lanjut skenario praktik berikutnya. Silakan siapkan package/project baru dengan struktur seperti ini:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="package source code structure"',title:'"package',source:!0,code:!0,'structure"':!0},"my_package\n\u2502\u2500\u2500\u2500 Cargo.toml\n\u2514\u2500\u2500\u2500 src\n     \u2502\u2500\u2500\u2500 shape.rs\n     \u2502\u2500\u2500\u2500 circle.rs\n     \u2502\u2500\u2500\u2500 square.rs\n     \u2514\u2500\u2500\u2500 main.rs\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Disiapkan suatu trait bernama ",(0,i.kt)("inlineCode",{parentName:"li"},"shape::Shape"),".",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Trait ini memiliki satu associated types bernama ",(0,i.kt)("inlineCode",{parentName:"li"},"Area"),"."),(0,i.kt)("li",{parentName:"ul"},"Dan memiliki sebuah definisi method header ",(0,i.kt)("inlineCode",{parentName:"li"},"area")," yang gunanya untuk menghitung luas bangun datar (",(0,i.kt)("em",{parentName:"li"},"shape"),")."))),(0,i.kt)("li",{parentName:"ul"},"Disiapkan struct ",(0,i.kt)("inlineCode",{parentName:"li"},"circle::Circle")," yang mengadopsi trait ",(0,i.kt)("inlineCode",{parentName:"li"},"shape::Shape"),"."),(0,i.kt)("li",{parentName:"ul"},"Disiapkan struct ",(0,i.kt)("inlineCode",{parentName:"li"},"square::Square")," yang mengadopsi trait ",(0,i.kt)("inlineCode",{parentName:"li"},"shape::Shape"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="src/shape.rs"',title:'"src/shape.rs"'},"pub trait Shape {\n    type Area;\n\n    fn area(&self) -> Self::Area;\n}\n")),(0,i.kt)("p",null,"Trait ",(0,i.kt)("inlineCode",{parentName:"p"},"Shape")," di atas spesifikasinya mirip seperti pada contoh sebelumnya, hanya saja kali ini trait-nya di set public agar bisa diakses dari ",(0,i.kt)("inlineCode",{parentName:"p"},"main.rs")," nantinya."),(0,i.kt)("p",null,"Trait ",(0,i.kt)("inlineCode",{parentName:"p"},"Shape")," kemudian diimplementasikan ke struct ",(0,i.kt)("inlineCode",{parentName:"p"},"Circle")," dan ",(0,i.kt)("inlineCode",{parentName:"p"},"Square"),", kode-nya bisa dilihat berikut:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="src/circle.rs"',title:'"src/circle.rs"'},"pub struct Circle {\n    pub radius: f64,\n}\n\nimpl crate::shape::Shape for Circle {\n    type Area = f64;\n\n    fn area(&self) -> Self::Area {\n        std::f64::consts::PI * self.radius * self.radius\n    }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="src/square.rs"',title:'"src/square.rs"'},"pub struct Square {\n    pub side: i64,\n}\n\nimpl crate::shape::Shape for Square {\n    type Area = i64;\n\n    fn area(&self) -> Self::Area {\n        self.side * self.side\n    }\n}\n")),(0,i.kt)("p",null,"Bisa dilihat pada kedua implementasi di atas, associated type ",(0,i.kt)("inlineCode",{parentName:"p"},"Area")," diisi dengan tipe concrete, yaitu:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Tipe data ",(0,i.kt)("inlineCode",{parentName:"li"},"f64")," sebagai tipe concrete ",(0,i.kt)("inlineCode",{parentName:"li"},"circle:Circle:Area")),(0,i.kt)("li",{parentName:"ul"},"Tipe data ",(0,i.kt)("inlineCode",{parentName:"li"},"i64")," sebagai tipe concrete ",(0,i.kt)("inlineCode",{parentName:"li"},"square:Square:Area"))),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Contoh di atas adalah cara pengaplikasian associated types.")),(0,i.kt)("p",null,"Lalu pada ",(0,i.kt)("inlineCode",{parentName:"p"},"main.rs"),", tipe data struct ",(0,i.kt)("inlineCode",{parentName:"p"},"circle::Circle")," dan ",(0,i.kt)("inlineCode",{parentName:"p"},"square::Square")," digunakan untuk membuat variabel baru, yang kemudian dari variabel tersebut, method ",(0,i.kt)("inlineCode",{parentName:"p"},".area()")," milik diakses."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="src/main.rs"',title:'"src/main.rs"'},'mod shape;\nmod circle;\nmod square;\n\nuse crate::shape::Shape;\n\nfn main() {\n    let obj1 = circle::Circle{ radius: 10.0 };\n    println!("area of circle: {:.2}", obj1.area());\n\n    let obj2 = square::Square{ side: 10 };\n    println!("area of square: {:}", obj2.area());\n}\n')),(0,i.kt)("p",null,"Silakan jalankan program dan lihat hasilnya."),(0,i.kt)("p",null,(0,i.kt)("img",{loading:"lazy",alt:"Trait",src:n(6254).Z,width:"469",height:"130"})),(0,i.kt)("p",null,"O iya, pada ",(0,i.kt)("inlineCode",{parentName:"p"},"main.rs"),", module item ",(0,i.kt)("inlineCode",{parentName:"p"},"shape::Shape")," perlu di-import meskipun kita tidak menggunakan ",(0,i.kt)("inlineCode",{parentName:"p"},"trait")," tersebut secara langsung. Jika tidak di-import, maka method ",(0,i.kt)("inlineCode",{parentName:"p"},".area()")," milik ",(0,i.kt)("inlineCode",{parentName:"p"},"Circle")," dan ",(0,i.kt)("inlineCode",{parentName:"p"},"Square")," tidak bisa diakses."),(0,i.kt)("h2",{id:"a378-attribute-derive"},"A.37.8. Attribute ",(0,i.kt)("inlineCode",{parentName:"h2"},"derive")),(0,i.kt)("p",null,"Ada cara lain untuk mengimplementasikan suatu trait ke dalam tipe data selain dengan menuliskan implementasinya secara eksplisit, caranya menggunakan attribute ",(0,i.kt)("inlineCode",{parentName:"p"},"derive"),"."),(0,i.kt)("p",null,"Lebih detailnya dibahas pada chapter ",(0,i.kt)("a",{parentName:"p",href:"/basic/attributes"},"Attributes"),"."),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"catatan-chapter-"},"Catatan chapter \ud83d\udcd1"),(0,i.kt)("h3",{id:"-source-code-praktik"},"\u25c9 Source code praktik"),(0,i.kt)("pre",null,(0,i.kt)("a",{href:"https://github.com/novalagung/dasarpemrogramanrust-example/tree/master/advanced_traits"},"github.com/novalagung/dasarpemrogramanrust-example/../advanced_traits")),(0,i.kt)("h3",{id:"-work-in-progress"},"\u25c9 Work in progress"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Pembahasan tentang trait bounds untuk implementasi method kondisional"),(0,i.kt)("li",{parentName:"ul"},"Pembahasan tentang trait overloading"),(0,i.kt)("li",{parentName:"ul"},"orphan rules")),(0,i.kt)("h3",{id:"-referensi"},"\u25c9 Referensi"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/book/ch10-02-traits.html"},"https://doc.rust-lang.org/book/ch10-02-traits.html")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/std/primitive.i32.html"},"https://doc.rust-lang.org/std/primitive.i32.html")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/std/fmt/trait.Debug.html"},"https://doc.rust-lang.org/std/fmt/trait.Debug.html")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/std/fmt/trait.Display.html"},"https://doc.rust-lang.org/std/fmt/trait.Display.html")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/std/string/struct.String.html"},"https://doc.rust-lang.org/std/string/struct.String.html"))))}m.isMDXComponent=!0},4176:(a,e,n)=>{n.d(e,{Z:()=>t});const t=n.p+"assets/images/traits-5-29be804051729f23db8dd64e978e2398.png"},6254:(a,e,n)=>{n.d(e,{Z:()=>t});const t=n.p+"assets/images/traits-6-8165525fc9f8604bf115634eeb974230.png"}}]);