"use strict";(self.webpackChunkdasarpemrogramanrust=self.webpackChunkdasarpemrogramanrust||[]).push([[2706],{3905:(e,a,n)=>{n.d(a,{Zo:()=>s,kt:()=>k});var i=n(7294);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);a&&(i=i.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function m(e,a){if(null==e)return{};var n,i,t=function(e,a){if(null==e)return{};var n,i,t={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var u=i.createContext({}),d=function(e){var a=i.useContext(u),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},s=function(e){var a=d(e.components);return i.createElement(u.Provider,{value:a},e.children)},o={inlineCode:"code",wrapper:function(e){var a=e.children;return i.createElement(i.Fragment,{},a)}},p=i.forwardRef((function(e,a){var n=e.components,t=e.mdxType,r=e.originalType,u=e.parentName,s=m(e,["components","mdxType","originalType","parentName"]),p=d(n),k=t,b=p["".concat(u,".").concat(k)]||p[k]||o[k]||r;return n?i.createElement(b,l(l({ref:a},s),{},{components:n})):i.createElement(b,l({ref:a},s))}));function k(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var r=n.length,l=new Array(r);l[0]=p;var m={};for(var u in a)hasOwnProperty.call(a,u)&&(m[u]=a[u]);m.originalType=e,m.mdxType="string"==typeof e?e:t,l[1]=m;for(var d=2;d<r;d++)l[d]=n[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5442:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>u,contentTitle:()=>l,default:()=>o,frontMatter:()=>r,metadata:()=>m,toc:()=>d});var i=n(7462),t=(n(7294),n(3905));const r={sidebar_position:20,title:"A.20. Module System \u279c Module",sidebar_label:"A.20. Module System \u279c Module"},l=void 0,m={unversionedId:"basic/module-basic",id:"basic/module-basic",title:"A.20. Module System \u279c Module",description:"Module adalah salah satu chapter yang cukup penting dalam pemrograman Rust. Pada bagian ini kita akan mempelajari dasarnya.",source:"@site/docs/basic/module-basic.md",sourceDirName:"basic",slug:"/basic/module-basic",permalink:"/basic/module-basic",draft:!1,tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20,title:"A.20. Module System \u279c Module",sidebar_label:"A.20. Module System \u279c Module"},sidebar:"tutorialSidebar",previous:{title:"A.19. Module System \u279c Package & Crate",permalink:"/basic/package-crate"},next:{title:"A.21. Module System \u279c Inline Module",permalink:"/basic/module-inline"}},u={},d=[{value:"A.20.1. Rust module system",id:"a201-rust-module-system",level:2},{value:"A.20.2. Praktik #1 - <code>nama_module.rs</code>",id:"a202-praktik-1---nama_modulers",level:2},{value:"\u25c9 Summary praktik #1",id:"-summary-praktik-1",level:3},{value:"\u25c9 <em>Naming convention</em> module",id:"-naming-convention-module",level:3},{value:"\u25c9 Module item",id:"-module-item",level:3},{value:"A.20.3. Praktik #2 - <code>nama_module/mod.rs</code>",id:"a203-praktik-2---nama_modulemodrs",level:2},{value:"\u25c9 Summary praktik #2",id:"-summary-praktik-2",level:3},{value:"\u25c9 Konversi string ke numerik",id:"-konversi-string-ke-numerik",level:3},{value:"A.20.4. Submodules",id:"a204-submodules",level:2},{value:"\u25c9 Summary praktik #3",id:"-summary-praktik-3",level:3},{value:"A.20.5. Penerapan keyword <code>use</code>",id:"a205-penerapan-keyword-use",level:2},{value:"A.20.6. Module <code>path</code> attribute",id:"a206-module-path-attribute",level:2},{value:"\u25c9 Summary praktik #4",id:"-summary-praktik-4",level:3},{value:"A.20.7. Pembahasan lanjutan",id:"a207-pembahasan-lanjutan",level:2},{value:"Catatan chapter \ud83d\udcd1",id:"catatan-chapter-",level:2},{value:"\u25c9 Source code praktik",id:"-source-code-praktik",level:3},{value:"\u25c9 Referensi",id:"-referensi",level:3}],s={toc:d};function o(e){let{components:a,...r}=e;return(0,t.kt)("wrapper",(0,i.Z)({},s,r,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"Module adalah salah satu chapter yang cukup penting dalam pemrograman Rust. Pada bagian ini kita akan mempelajari dasarnya."),(0,t.kt)("h2",{id:"a201-rust-module-system"},"A.20.1. Rust module system"),(0,t.kt)("p",null,"Setiap bahasa pemrograman memiliki caranya sendiri dalam hal pengelolahan struktur files dan folder dalam project. Project yang isinya ada sangat banyak hal diatur sedemikian rupa menjadi beberapa bagian dan/atau sub-bagian sesuai dengan fungsinya masing-masing."),(0,t.kt)("p",null,"Di Rust, module memiliki hierarki (biasa disebut dengan ",(0,t.kt)("em",{parentName:"p"},"module tree"),") yang ",(0,t.kt)("em",{parentName:"p"},"root"),"/akarnya adalah file entrypoint crate, yaitu ",(0,t.kt)("inlineCode",{parentName:"p"},"main.rs")," untuk ",(0,t.kt)("em",{parentName:"p"},"binary crate")," dan ",(0,t.kt)("inlineCode",{parentName:"p"},"lib.rs")," untuk ",(0,t.kt)("em",{parentName:"p"},"library crate"),". Kedua file ini biasa disebut dengan ",(0,t.kt)("em",{parentName:"p"},"crate root file"),"."),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"Di sini pembahasan akan fokus pada penerapan module dalam ",(0,t.kt)("em",{parentName:"p"},"binary crate"),". Kita belum masuk ke pembahasan tentang ",(0,t.kt)("em",{parentName:"p"},"library crate"),".")),(0,t.kt)("p",null,"Rust memiliki 2 jenis modul, yaitu ",(0,t.kt)("em",{parentName:"p"},"normal module")," dan ",(0,t.kt)("em",{parentName:"p"},"inline module"),". Pembahasan dimulai dengan normal module terlebih dahulu."),(0,t.kt)("p",null,"Keyword ",(0,t.kt)("inlineCode",{parentName:"p"},"mod")," digunakan untuk mendefinisikan/mendaftarkan sebuah module. Nama module menjadi path di mana isi module atau ",(0,t.kt)("em",{parentName:"p"},"module item")," harus berada. Sebagai contoh:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"module yang didefinisikan dengan nama ",(0,t.kt)("inlineCode",{parentName:"li"},"my_number"),", maka item-nya harus berada pada file ",(0,t.kt)("inlineCode",{parentName:"li"},"my_number.rs")," atau ",(0,t.kt)("inlineCode",{parentName:"li"},"my_number/mod.rs")),(0,t.kt)("li",{parentName:"ul"},"module yang didefinisikan dengan nama ",(0,t.kt)("inlineCode",{parentName:"li"},"my_io"),", maka item-nya harus berada pada file ",(0,t.kt)("inlineCode",{parentName:"li"},"my_io.rs")," atau ",(0,t.kt)("inlineCode",{parentName:"li"},"my_io/mod.rs"))),(0,t.kt)("p",null,"Pendefinisian nama module sendiri berada pada file entrypoint ",(0,t.kt)("em",{parentName:"p"},"crate")," yaitu ",(0,t.kt)("inlineCode",{parentName:"p"},"main.rs")," (atau ",(0,t.kt)("inlineCode",{parentName:"p"},"lib.rs")," untuk library crate). Jadi pendefinisian nama module dan isi/item-nya terpisah."),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Nama module ditulis di ",(0,t.kt)("inlineCode",{parentName:"li"},"main.rs")," (atau ",(0,t.kt)("inlineCode",{parentName:"li"},"lib.rs")," untuk library crate)"),(0,t.kt)("li",{parentName:"ul"},"Item atau isi module ditulis dalam file ",(0,t.kt)("inlineCode",{parentName:"li"},"nama_module.rs")," atau ",(0,t.kt)("inlineCode",{parentName:"li"},"nama_module/mod.rs"))),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"Sebenarnya ada beberapa hal lainnya lagi yang masih relevan yang perlu dibahas di awal, yaitu perihal sub-module. Akan tetapi agar tidak makin bingung, mari kita lanjut ke praktik terlebih dahulu.")),(0,t.kt)("h2",{id:"a202-praktik-1---nama_modulers"},"A.20.2. Praktik #1 - ",(0,t.kt)("inlineCode",{parentName:"h2"},"nama_module.rs")),(0,t.kt)("p",null,"Mari buat program sederhana, yang isinya mencakup pembahasan tentang module. Pada program kecil ini, inputan user ditampung ke sebuah variabel, kemudian ditampilkan ke layar. Proses pembacaan inputan user akan di-split sebagai module."),(0,t.kt)("p",null,"Ok, langsung saja, buat package/project baru dengan nama bebas. Di sini penulis menggunakan nama package ",(0,t.kt)("inlineCode",{parentName:"p"},"module_1"),"."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rust"},"cargo new module_1\n")),(0,t.kt)("p",null,"Setelah itu siapkan 1 buah file bernama ",(0,t.kt)("inlineCode",{parentName:"p"},"my_io.rs"),", letakan di dalam folder ",(0,t.kt)("inlineCode",{parentName:"p"},"src")," (1 level dengan file ",(0,t.kt)("inlineCode",{parentName:"p"},"main.rs"),"). File ini difungsikan sebagai tempat definisi ",(0,t.kt)("em",{parentName:"p"},"module item")," milik sebuah module bernama ",(0,t.kt)("inlineCode",{parentName:"p"},"my_io")," (io di sini kependekan dari ",(0,t.kt)("em",{parentName:"p"},"input output"),")."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="package source code structure"',title:'"package',source:!0,code:!0,'structure"':!0},"module_1\n\u2502\u2500\u2500\u2500 Cargo.toml\n\u2514\u2500\u2500\u2500 src\n     \u2502\u2500\u2500\u2500 main.rs\n     \u2514\u2500\u2500\u2500 my_io.rs\n")),(0,t.kt)("p",null,"Lanjut, definisikan fungsi ",(0,t.kt)("inlineCode",{parentName:"p"},"read_entry")," di file ",(0,t.kt)("inlineCode",{parentName:"p"},"my_io.rs"),", isinya kurang lebih adalah kode untuk membaca inputan user lalu mengembalikannya dalam bentuk ",(0,t.kt)("inlineCode",{parentName:"p"},"String"),"."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="src/my_io.rs"',title:'"src/my_io.rs"'},'pub fn read_entry() -> String {\n    let mut message = std::string::String::new();\n    let stdin_reader = std::io::stdin(); \n    let reader_res = stdin_reader.read_line(&mut message);\n\n    if reader_res.is_err() {\n        println!("error! {:?}", reader_res.err());\n    }\n\n    message.trim().to_string()\n}\n')),(0,t.kt)("p",null,"Ok, kita telah menyiapkan satu item milik module ",(0,t.kt)("inlineCode",{parentName:"p"},"my_io")," yaitu sebuah fungsi bernama ",(0,t.kt)("inlineCode",{parentName:"p"},"read_entry"),". 1 hal yang sedikit berbeda pada definisi fungsi di atas adalah penambahan keyword ",(0,t.kt)("inlineCode",{parentName:"p"},"pub")," yang ditulis sebagai prefix definisi fungsi."),(0,t.kt)("p",null,"Keyword ",(0,t.kt)("inlineCode",{parentName:"p"},"pub")," digunakan untuk menjadikan suatu item menjadi ",(0,t.kt)("strong",{parentName:"p"},"public"),", agar bisa diakses dari luar module."),(0,t.kt)("p",null,"Fungsi ",(0,t.kt)("inlineCode",{parentName:"p"},"read_entry")," ini berada dalam module ",(0,t.kt)("inlineCode",{parentName:"p"},"my_io"),". Jika tidak ada keyword ",(0,t.kt)("inlineCode",{parentName:"p"},"pub")," di situ, maka fungsi ",(0,t.kt)("inlineCode",{parentName:"p"},"read_entry")," hanya bisa diakses dari dalam ",(0,t.kt)("inlineCode",{parentName:"p"},"my_io")," saja, tidak bisa diakses dari luar module contohnya seperti dari ",(0,t.kt)("inlineCode",{parentName:"p"},"main.rs"),". Dengan menjadikan ",(0,t.kt)("inlineCode",{parentName:"p"},"read_entry")," sebagai fungsi yang public, maka fungsi tersebut bisa diakses dari ",(0,t.kt)("inlineCode",{parentName:"p"},"main.rs"),"."),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"Lebih jelasnya mengenai keyword ",(0,t.kt)("inlineCode",{parentName:"p"},"pub")," dibahas pada chapter ",(0,t.kt)("a",{parentName:"p",href:"/basic/visibility-privacy"},"Module System \u279c Visibility & Privacy"))),(0,t.kt)("p",null,"Isi module sudah siap, selanjutnya lanjut ke pendefinisian modul. Umumnya pada bahasa pemrograman, definisi module adalah ada dalam file di mana isi module berada, namun tidak untuk Rust."),(0,t.kt)("p",null,"Di Rust, definisi sebuah module (sekali lagi bukan item/isinya ya, tapi definisi dari module itu sendiri) dituliskan pada file terpisah, yaitu di file entrypoint crate, yaitu ",(0,t.kt)("inlineCode",{parentName:"p"},"main.rs")," atau ",(0,t.kt)("inlineCode",{parentName:"p"},"lib.rs"),"."),(0,t.kt)("p",null,"Lanjut, sekarang buka file ",(0,t.kt)("inlineCode",{parentName:"p"},"main.rs")," dan tulis definisi modul ",(0,t.kt)("inlineCode",{parentName:"p"},"my_io")," menggunakan statement ",(0,t.kt)("inlineCode",{parentName:"p"},"mod my_io"),"."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="src/main.rs"',title:'"src/main.rs"'},"// definisi module my_io\nmod my_io;\n\n// fungsi main\nfn main() {\n    // ...\n}\n")),(0,t.kt)("p",null,"Sekarang aplikasikan fungsi ",(0,t.kt)("inlineCode",{parentName:"p"},"read_entry")," milik module ",(0,t.kt)("inlineCode",{parentName:"p"},"my_io")," di fungsi ",(0,t.kt)("inlineCode",{parentName:"p"},"main")," untuk membaca inputan user."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="src/main.rs"',title:'"src/main.rs"'},'mod my_io;\n\nfn main() {\n    println!("enter any number:");\n    let message = my_io::read_entry();\n    println!("your number: {}", message);\n}\n')),(0,t.kt)("p",null,"Jalankan program, masukan sebuah angka, lalu enter. Lihat hasilnya, program berjalan sesuai harapan."),(0,t.kt)("p",null,(0,t.kt)("img",{loading:"eager",fetchpriority:"high",alt:"Rust module",src:n(5152).Z,width:"762",height:"717"})),(0,t.kt)("p",null,"Cara pengaksesan item dari sebuah module yang kita definisikan sendiri adalah sama seperti pengaksesan item dari crate lainnya, yaitu menggunakan ",(0,t.kt)("em",{parentName:"p"},"path"),". Statement ",(0,t.kt)("inlineCode",{parentName:"p"},"my_io::read_entry()")," artinya item ",(0,t.kt)("inlineCode",{parentName:"p"},"read_entry")," yang merupakan fungsi dalam module ",(0,t.kt)("inlineCode",{parentName:"p"},"my_io")," digunakan."),(0,t.kt)("h3",{id:"-summary-praktik-1"},"\u25c9 Summary praktik #1"),(0,t.kt)("p",null,"Pada praktik pertama ini kita telah belajar penerapan module dengan mengaplikasikan beberapa hal berikut:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Penggunaan normal module dalam binary crate"),(0,t.kt)("li",{parentName:"ul"},"Pembuatan module dengan nama ",(0,t.kt)("inlineCode",{parentName:"li"},"my_io"),", dengan isi/item ditulis pada file ",(0,t.kt)("inlineCode",{parentName:"li"},"my_io.rs")),(0,t.kt)("li",{parentName:"ul"},"Penggunaan keyword ",(0,t.kt)("inlineCode",{parentName:"li"},"pub")," untuk meng-export atau menjadikan item menjadi public, agar bisa diakses dari luar module"),(0,t.kt)("li",{parentName:"ul"},"Pengaksesan item milik module, yaitu: ",(0,t.kt)("inlineCode",{parentName:"li"},"my_io::read_entry"))),(0,t.kt)("h3",{id:"-naming-convention-module"},"\u25c9 ",(0,t.kt)("em",{parentName:"h3"},"Naming convention")," module"),(0,t.kt)("p",null,"Sesuai anjuran di ",(0,t.kt)("a",{parentName:"p",href:"https://rust-lang.github.io/api-guidelines/naming.html"},"halaman dokumentasi Rust"),", aturan penulisan nama module adalah menggunakan snake case, contohnya ",(0,t.kt)("inlineCode",{parentName:"p"},"my_io"),"."),(0,t.kt)("h3",{id:"-module-item"},"\u25c9 Module item"),(0,t.kt)("p",null,"Module item adalah apapun yang didefinisikan di dalam sebuah module. Pada contoh praktik ke-1 di atas, module ",(0,t.kt)("inlineCode",{parentName:"p"},"my_io")," memiliki 1 buah item yaitu fungsi bernama ",(0,t.kt)("inlineCode",{parentName:"p"},"read_entry"),"."),(0,t.kt)("p",null,"Selain fungsi, module item bisa dalam bentuk lainnya, contohnya: konstanta, submodule, struct, dan lainnya."),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"Lebih jelasnya tentang macam-macam item dibahas pada chapter ",(0,t.kt)("a",{parentName:"p",href:"/basic/path-item"},"Module System \u279c Path & Item"))),(0,t.kt)("h2",{id:"a203-praktik-2---nama_modulemodrs"},"A.20.3. Praktik #2 - ",(0,t.kt)("inlineCode",{parentName:"h2"},"nama_module/mod.rs")),(0,t.kt)("p",null,"Bagian ini merupakan kelanjutan dari praktik sebelumnya. Program sederhana yang sudah dibuat ditambahi beberapa hal. Data inputan user dikonversi ke bentuk angka untuk kemudian dicek apakah angka tersebut bilangan ganjil atau genap."),(0,t.kt)("p",null,"Fungsi untuk konversi string ke bentuk numerik dan juga untuk pengecekan bilangan ganjil genap, adalah dua buah item milik module bernama ",(0,t.kt)("inlineCode",{parentName:"p"},"my_number")," yang akan kita definisikan sebentar lagi."),(0,t.kt)("p",null,"Definisi item module ",(0,t.kt)("inlineCode",{parentName:"p"},"my_io")," menggunakan notasi penulisan file ",(0,t.kt)("inlineCode",{parentName:"p"},"nama_module.rs")," (yaitu ",(0,t.kt)("inlineCode",{parentName:"p"},"my_io.rs"),"). Pada module ",(0,t.kt)("inlineCode",{parentName:"p"},"my_number")," ini kita akan gunakan notasi penulisan ",(0,t.kt)("inlineCode",{parentName:"p"},"nama_module/mod.rs")," (menjadi ",(0,t.kt)("inlineCode",{parentName:"p"},"my_number/mod.rs"),") untuk menampung definisi item module ",(0,t.kt)("inlineCode",{parentName:"p"},"my_number"),"."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="package source code structure"',title:'"package',source:!0,code:!0,'structure"':!0},"module_1\n\u2502\u2500\u2500\u2500 Cargo.toml\n\u2514\u2500\u2500\u2500 src\n     \u2502\u2500\u2500\u2500 my_number\n     \u2502    \u2514\u2500\u2500\u2500 mod.rs\n     \u2502\u2500\u2500\u2500 main.rs\n     \u2514\u2500\u2500\u2500 my_io.rs\n")),(0,t.kt)("p",null,"Ok, sekarang buat saja folder dan filenya, yaitu ",(0,t.kt)("inlineCode",{parentName:"p"},"my_number/mod.rs"),". Lalu pada file ",(0,t.kt)("inlineCode",{parentName:"p"},"mod.rs")," tulis 2 buah fungsi berikut:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"Fungsi untuk konversi string ke numerik ",(0,t.kt)("inlineCode",{parentName:"p"},"i32")),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="src/my_number/mod.rs"',title:'"src/my_number/mod.rs"'},"pub fn string_to_number(text: String) -> i32 {\n    return text.parse::<i32>().unwrap();\n}\n"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"Fungsi untuk pengecekan bilangan ganjil"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="src/my_number/mod.rs"',title:'"src/my_number/mod.rs"'},"// ...\n\npub fn is_odd_number(number: i32) -> bool {\n    number % 2 == 1\n}\n")))),(0,t.kt)("p",null,"Kemudian tulis definisi module ",(0,t.kt)("inlineCode",{parentName:"p"},"my_number")," dalam file entrypoint crate, yaitu ",(0,t.kt)("inlineCode",{parentName:"p"},"main.rs"),"."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="src/main.rs"',title:'"src/main.rs"'},"// definisi module my_io\nmod my_io;\n\n// definisi module my_number\nmod my_number;\n\n// fungsi main\nfn main() {\n    // ...\n}\n")),(0,t.kt)("p",null,"Terakhir, aplikasikan dua buah fungsi yang sudah didefinisikan."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="src/main.rs"',title:'"src/main.rs"'},'fn main() {\n    println!("enter any number:");\n    let message = my_io::read_entry();\n    println!("your number: {}", message);\n\n    let number = my_number::string_to_number(message);\n    let result = my_number::is_odd_number(number);\n    println!("is odd number: {}", result);\n}\n')),(0,t.kt)("p",null,"Jalankan program, lihat hasilnya."),(0,t.kt)("p",null,(0,t.kt)("img",{loading:"lazy",alt:"Rust module",src:n(7050).Z,width:"777",height:"872"})),(0,t.kt)("h3",{id:"-summary-praktik-2"},"\u25c9 Summary praktik #2"),(0,t.kt)("p",null,"Hingga praktik ke-2 ini, kita telah belajar penerapan module dengan mengaplikasikan beberapa hal berikut:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Penggunaan normal module dalam binary crate"),(0,t.kt)("li",{parentName:"ul"},"Pembuatan module dengan nama ",(0,t.kt)("inlineCode",{parentName:"li"},"my_io"),", dengan isi/item ditulis pada file ",(0,t.kt)("inlineCode",{parentName:"li"},"my_io.rs")),(0,t.kt)("li",{parentName:"ul"},"Pembuatan module dengan nama ",(0,t.kt)("inlineCode",{parentName:"li"},"my_number"),", dengan isi/item ditulis pada file ",(0,t.kt)("inlineCode",{parentName:"li"},"my_number/mod.rs")),(0,t.kt)("li",{parentName:"ul"},"Penggunaan keyword ",(0,t.kt)("inlineCode",{parentName:"li"},"pub")," untuk meng-export atau menjadikan item menjadi public, agar bisa diakses dari luar module"),(0,t.kt)("li",{parentName:"ul"},"Pengaksesan item milik module, yaitu: ",(0,t.kt)("inlineCode",{parentName:"li"},"my_io::read_entry"),", ",(0,t.kt)("inlineCode",{parentName:"li"},"my_number::string_to_number"),", dan ",(0,t.kt)("inlineCode",{parentName:"li"},"my_number::is_odd_number"))),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"Penerapan notasi penulisan isi module ",(0,t.kt)("inlineCode",{parentName:"p"},"nama_module.rs")," dan ",(0,t.kt)("inlineCode",{parentName:"p"},"nama_module/mod.rs")," bisa diterapkan dalam satu package")),(0,t.kt)("h3",{id:"-konversi-string-ke-numerik"},"\u25c9 Konversi string ke numerik"),(0,t.kt)("p",null,"Rust mengenal beberapa jenis konversi antar tipe data. Teknik konversi yang kita praktikkan pada chapter ini menggunakan method ",(0,t.kt)("inlineCode",{parentName:"p"},".parse()"),", cara ini bisa dilakukan untuk konversi tipe data dari custom types ke primitive. Contohnya seperti di atas, dari ",(0,t.kt)("inlineCode",{parentName:"p"},"String")," ke ",(0,t.kt)("inlineCode",{parentName:"p"},"i32"),"."),(0,t.kt)("p",null,"Penggunaannya cukup mudah, akses saja method ",(0,t.kt)("inlineCode",{parentName:"p"},".parse()")," kemudian sisipkan tipe data sebagai parameter generic. Lalu chain dengan method ",(0,t.kt)("inlineCode",{parentName:"p"},"unwrap")," (yang method tersebut merupakan item milik tipe data ",(0,t.kt)("em",{parentName:"p"},"generic result type")," atau ",(0,t.kt)("inlineCode",{parentName:"p"},"Result<T, E>"),")."),(0,t.kt)("p",null,"Contoh lain untuk konversi dari tipe primitif lainnya bisa dilihat berikut:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rust"},'let data_number = "24".parse::<i32>().unwrap();\nlet data_bool = "true".parse::<bool>().unwrap();\nlet data_float = "3.14".parse::<f64>().unwrap();\n')),(0,t.kt)("p",null,"Method ",(0,t.kt)("inlineCode",{parentName:"p"},"parse")," menghasilkan data bertipe ",(0,t.kt)("em",{parentName:"p"},"generic result type")," atau ",(0,t.kt)("inlineCode",{parentName:"p"},"Result<T, E>"),". Tipe ini memiliki method bernama ",(0,t.kt)("inlineCode",{parentName:"p"},"unwrap")," yang berguna untuk mengambil nilai."),(0,t.kt)("blockquote",null,(0,t.kt)("ul",{parentName:"blockquote"},(0,t.kt)("li",{parentName:"ul"},"Lebih jelasnya mengenai casting dibahas pada chapter ",(0,t.kt)("a",{parentName:"li",href:"/basic/type-alias-casting"},"Type Alias & Casting")," dan ",(0,t.kt)("a",{parentName:"li",href:"#/wip/trait-conversion-from-into"},"Trait \u279c Conversion (From & Into)")),(0,t.kt)("li",{parentName:"ul"},"Lebih jelasnya mengenai generic dibahas pada chapter ",(0,t.kt)("a",{parentName:"li",href:"/basic/generics"},"Generics")),(0,t.kt)("li",{parentName:"ul"},"Lebih jelasnya mengenai result type dibahas pada chapter ",(0,t.kt)("a",{parentName:"li",href:"/basic/result-type"},"Tipe Data \u279c Result")))),(0,t.kt)("h2",{id:"a204-submodules"},"A.20.4. Submodules"),(0,t.kt)("p",null,"Sampai bagian ini kita telah belajar tentang module beserta 2 macam cara penerapannya."),(0,t.kt)("p",null,"Sebuah module bisa saja memiliki module di bawahnya (biasa disebut submodule), dan hal ini adalah konsep yang umum dalam bahasa pemrograman. Di Rust, aturan dalam pembuatan submodule masih sama seperti module, perbedaannya adalah tempat di mana submodule didefinisikan. Jika pada root module definisi ada pada file ",(0,t.kt)("inlineCode",{parentName:"p"},"main.rs")," atau ",(0,t.kt)("inlineCode",{parentName:"p"},"lib.rs"),", maka pada submodule definisi ada pada file di mana ",(0,t.kt)("em",{parentName:"p"},"parent module")," berada."),(0,t.kt)("p",null,"Sebagai contoh jika pada program sebelumnya kita tambahkan module ",(0,t.kt)("inlineCode",{parentName:"p"},"my_number")," yang sudah dibuat, jika ada submodule dengan nama ",(0,t.kt)("inlineCode",{parentName:"p"},"conversion_utility"),", maka definisi module berada di ",(0,t.kt)("inlineCode",{parentName:"p"},"my_number/mod.rs")," dan itemnya di ",(0,t.kt)("inlineCode",{parentName:"p"},"my_number/conversion_utility/mod.rs"),"."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="package source code structure"',title:'"package',source:!0,code:!0,'structure"':!0},"my_package\n\u2502\u2500\u2500\u2500 Cargo.toml\n\u2514\u2500\u2500\u2500 src\n     \u2502\u2500\u2500\u2500 main.rs\n     \u2502\u2500\u2500\u2500 my_io.rs\n     \u2514\u2500\u2500\u2500 my_number\n          \u2502\u2500\u2500\u2500 mod.rs              // <----- definisi submodule conversion_utility\n          \u2514\u2500\u2500\u2500 conversion_utility\n               \u2514\u2500\u2500\u2500 mod.rs         // <----- definisi item/isi conversion_utility\n")),(0,t.kt)("p",null,"Atau definisi module tetap di ",(0,t.kt)("inlineCode",{parentName:"p"},"my_number/mod.rs")," namun itemnya di ",(0,t.kt)("inlineCode",{parentName:"p"},"my_number/conversion_utility.rs"),"."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="package source code structure"',title:'"package',source:!0,code:!0,'structure"':!0},"my_package\n\u2502\u2500\u2500\u2500 Cargo.toml\n\u2514\u2500\u2500\u2500 src\n     \u2502\u2500\u2500\u2500 main.rs\n     \u2502\u2500\u2500\u2500 my_io.rs\n     \u2514\u2500\u2500\u2500 my_number\n          \u2502\u2500\u2500\u2500 mod.rs                // <----- definisi submodule conversion_utility\n          \u2514\u2500\u2500\u2500 conversion_utility.rs // <----- definisi item/isi conversion_utility\n")),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"Penerapan notasi penulisan ",(0,t.kt)("inlineCode",{parentName:"p"},"nama_module.rs")," biasanya dalam case ketika module tersebut tidak memiliki submodule."),(0,t.kt)("p",{parentName:"blockquote"},"Untuk module yang memiliki submodule, parent module harus menerapkan notasi penulisan ",(0,t.kt)("inlineCode",{parentName:"p"},"nama_module/mod.rs"),", hal ini karena pendefinisian submodule berada pada file ",(0,t.kt)("inlineCode",{parentName:"p"},"mod.rs")," dalam parent module tersebut.")),(0,t.kt)("p",null,"Lalu bagaimana jika sebuah submodule memiliki submodule yang memiliki submodule ... dst, aturannya tetap sama seperti aturan submodule."),(0,t.kt)("p",null,"Mari lanjut praktik agar tidak bingung. Kita akan modifikasi program sebelumnya. Item ",(0,t.kt)("inlineCode",{parentName:"p"},"string_to_number")," yang sebelumnya adalah item milik ",(0,t.kt)("inlineCode",{parentName:"p"},"my_number")," kita pindah ke sebuah module baru bernama ",(0,t.kt)("inlineCode",{parentName:"p"},"conversion_utility")," yang merupakan submodule dari ",(0,t.kt)("inlineCode",{parentName:"p"},"my_number"),". Silakan buat file baru ",(0,t.kt)("inlineCode",{parentName:"p"},"my_number/conversion_utility/mod.rs"),", kemudian isi dengan fungsi berikut:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="src/my_number/conversion_utility/mod.rs"',title:'"src/my_number/conversion_utility/mod.rs"'},"pub fn string_to_number(text: String) -> i32 {\n    return text.parse::<i32>().unwrap();\n}\n")),(0,t.kt)("p",null,"Fungsi ",(0,t.kt)("inlineCode",{parentName:"p"},"string_to_number")," yang sebelumnya ada di ",(0,t.kt)("inlineCode",{parentName:"p"},"my_number/mod.rs")," silakan dihapus."),(0,t.kt)("p",null,"Kemudian pada file ",(0,t.kt)("inlineCode",{parentName:"p"},"my_number/mod.rs"),", tambahkan definisi submodule ",(0,t.kt)("inlineCode",{parentName:"p"},"conversion_utility"),". Isi file tersebut kurang lebih menjadi seperti berikut:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="src/my_number/mod.rs"',title:'"src/my_number/mod.rs"'},"pub mod conversion_utility;\n\npub fn is_odd_number(number: i32) -> bool {\n    number % 2 == 1\n}\n")),(0,t.kt)("p",null,"O iya, karena submodule merupakan sebuah item milik module, maka harus ditambahkan juga keyword ",(0,t.kt)("inlineCode",{parentName:"p"},"pub"),", agar submodule bisa diakses dari luar scope-nya. Contoh penerapannya bisa dilihat di atas."),(0,t.kt)("p",null,"Terakhir, pada ",(0,t.kt)("inlineCode",{parentName:"p"},"main.rs"),", ubah pemanggilan fungsi ",(0,t.kt)("inlineCode",{parentName:"p"},"string_to_number")," dari ..."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="src/main.rs"',title:'"src/main.rs"'},"let number = my_number::string_to_number(message);\n")),(0,t.kt)("p",null,"... menjadi ..."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="src/main.rs"',title:'"src/main.rs"'},"let number = my_number::conversion_utility::string_to_number(message);\n")),(0,t.kt)("p",null,"Kurang lebih strukturnya menjadi seperti berikut:"),(0,t.kt)("p",null,(0,t.kt)("img",{loading:"lazy",alt:"Rust submodule",src:n(3749).Z,width:"940",height:"955"})),(0,t.kt)("p",null,"Jalankan program untuk mengetest hasilnya."),(0,t.kt)("h3",{id:"-summary-praktik-3"},"\u25c9 Summary praktik #3"),(0,t.kt)("p",null,"Hingga pembahasan pada praktik submodule, kita telah belajar penerapan module dengan mengaplikasikan beberapa hal berikut:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Penggunaan normal module dalam binary crate"),(0,t.kt)("li",{parentName:"ul"},"Pembuatan module dengan nama ",(0,t.kt)("inlineCode",{parentName:"li"},"my_io"),", dengan isi/item ditulis pada file ",(0,t.kt)("inlineCode",{parentName:"li"},"my_io.rs")),(0,t.kt)("li",{parentName:"ul"},"Pembuatan module dengan nama ",(0,t.kt)("inlineCode",{parentName:"li"},"my_number"),", dengan isi/item ditulis pada file ",(0,t.kt)("inlineCode",{parentName:"li"},"my_number/mod.rs")),(0,t.kt)("li",{parentName:"ul"},"Pembuatan submodule dengan nama ",(0,t.kt)("inlineCode",{parentName:"li"},"my_number/conversion_utility"),", dengan isi/item ditulis pada file ",(0,t.kt)("inlineCode",{parentName:"li"},"my_number/conversion.rs")," yang di-import menggunakan ",(0,t.kt)("inlineCode",{parentName:"li"},"path")," attribute."),(0,t.kt)("li",{parentName:"ul"},"Penggunaan keyword ",(0,t.kt)("inlineCode",{parentName:"li"},"pub")," pada fungsi agar bisa diakses dari luar module"),(0,t.kt)("li",{parentName:"ul"},"Penggunaan keyword ",(0,t.kt)("inlineCode",{parentName:"li"},"pub")," pada submodule agar bisa diakses dari luar parent module"),(0,t.kt)("li",{parentName:"ul"},"Pengaksesan item milik module, yaitu: ",(0,t.kt)("inlineCode",{parentName:"li"},"my_io::read_entry"),", ",(0,t.kt)("inlineCode",{parentName:"li"},"my_number::conversion_utility::string_to_number"),", dan ",(0,t.kt)("inlineCode",{parentName:"li"},"my_number::is_odd_number"))),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"Penerapan notasi penulisan isi module ",(0,t.kt)("inlineCode",{parentName:"p"},"nama_module.rs")," dan ",(0,t.kt)("inlineCode",{parentName:"p"},"nama_module/mod.rs")," bisa diterapkan dalam satu package")),(0,t.kt)("h2",{id:"a205-penerapan-keyword-use"},"A.20.5. Penerapan keyword ",(0,t.kt)("inlineCode",{parentName:"h2"},"use")),(0,t.kt)("p",null,"Keyword ",(0,t.kt)("inlineCode",{parentName:"p"},"use")," bisa digunakan untuk meng-import module atau item tertentu, dan dengannya pengaksesan item menjadi lebih pendek. Contohnya:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rust"},"my_number::conversion_utility::string_to_number(message);\n")),(0,t.kt)("p",null,"... bisa dituliskan menjadi ..."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rust"},"use my_number::conversion_utility::string_to_number;\nstring_to_number(message);\n")),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"Lebih jelasnya mengenai keyword ",(0,t.kt)("inlineCode",{parentName:"p"},"use")," dibahas pada chapter ",(0,t.kt)("a",{parentName:"p",href:"/basic/use"},"Module System \u279c Use"))),(0,t.kt)("h2",{id:"a206-module-path-attribute"},"A.20.6. Module ",(0,t.kt)("inlineCode",{parentName:"h2"},"path")," attribute"),(0,t.kt)("p",null,"Selain menggunakan dua teknik definisi module item di atas yang fokusnya ada pada penamaan file, ada juga cara lain pendefinisian module item, yaitu dengan memanfaatkan ",(0,t.kt)("inlineCode",{parentName:"p"},"path")," attribute."),(0,t.kt)("p",null,"Mari kita praktikkan, silakan ubah struktur package yang sudah dibuat dari ..."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="package source code structure"',title:'"package',source:!0,code:!0,'structure"':!0},"my_package\n\u2502\u2500\u2500\u2500 Cargo.toml\n\u2514\u2500\u2500\u2500 src\n     \u2502\u2500\u2500\u2500 main.rs\n     \u2502\u2500\u2500\u2500 my_io.rs\n     \u2514\u2500\u2500\u2500 my_number\n          \u2502\u2500\u2500\u2500 mod.rs                // <----- definisi submodule conversion_utility\n          \u2514\u2500\u2500\u2500 conversion_utility.rs // <----- definisi item/isi conversion_utility\n")),(0,t.kt)("p",null,"... menjadi ..."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="package source code structure"',title:'"package',source:!0,code:!0,'structure"':!0},"my_package\n\u2502\u2500\u2500\u2500 Cargo.toml\n\u2514\u2500\u2500\u2500 src\n     \u2502\u2500\u2500\u2500 main.rs\n     \u2502\u2500\u2500\u2500 my_io.rs\n     \u2514\u2500\u2500\u2500 my_number\n          \u2502\u2500\u2500\u2500 mod.rs        // <----- definisi submodule conversion_utility\n          \u2514\u2500\u2500\u2500 conversion.rs // <----- definisi item/isi conversion_utility\n")),(0,t.kt)("p",null,"Yang telah kita lakukan adalah me-rename file ",(0,t.kt)("inlineCode",{parentName:"p"},"conversion_utility.rs")," menjadi ",(0,t.kt)("inlineCode",{parentName:"p"},"conversion.rs"),". Efeknya akan muncul error dalam pengaksesan module item, karena submodule ",(0,t.kt)("inlineCode",{parentName:"p"},"my_number/conversion_utility")," isi/item-nya harus berada pada file ",(0,t.kt)("inlineCode",{parentName:"p"},"my_number/conversion_utility.rs")," atau ",(0,t.kt)("inlineCode",{parentName:"p"},"my_number/conversion_utility/mod.rs"),". Sedangkan file ",(0,t.kt)("inlineCode",{parentName:"p"},"conversion.rs")," tidak memenuhi kriteria tersebut."),(0,t.kt)("p",null,"Sekarang buka isi file ",(0,t.kt)("inlineCode",{parentName:"p"},"my_number/mod.rs"),", lalu ubah statement pendefinisian submodule dari ..."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="src/my_number/mod.rs"',title:'"src/my_number/mod.rs"'},"pub mod conversion_utility;\n")),(0,t.kt)("p",null,"... menjadi ..."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="src/my_number/mod.rs"',title:'"src/my_number/mod.rs"'},'#[path = "conversion.rs"]\npub mod conversion_utility;\n')),(0,t.kt)("p",null,(0,t.kt)("img",{loading:"lazy",alt:"Rust module",src:n(6827).Z,width:"690",height:"365"})),(0,t.kt)("p",null,"Lalu run, dan program akan jalan normal tanpa error."),(0,t.kt)("p",null,"Statement ",(0,t.kt)("inlineCode",{parentName:"p"},'#[path = "conversion.rs"]')," di atas merupakan contoh penerapan dari Rust path attributes. Dengannya kita bisa menempatkan isi sebuah module pada file yang namanya bebas (pada contoh di atas, file bernama ",(0,t.kt)("inlineCode",{parentName:"p"},"conversion.rs"),")."),(0,t.kt)("h3",{id:"-summary-praktik-4"},"\u25c9 Summary praktik #4"),(0,t.kt)("p",null,"Hingga pembahasan pada praktik module ",(0,t.kt)("inlineCode",{parentName:"p"},"path")," attribute, kita telah belajar penerapan module dengan mengaplikasikan beberapa hal berikut:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Penggunaan normal module dalam binary crate"),(0,t.kt)("li",{parentName:"ul"},"Pembuatan module dengan nama ",(0,t.kt)("inlineCode",{parentName:"li"},"my_io"),", dengan isi/item ditulis pada file ",(0,t.kt)("inlineCode",{parentName:"li"},"my_io.rs")),(0,t.kt)("li",{parentName:"ul"},"Pembuatan module dengan nama ",(0,t.kt)("inlineCode",{parentName:"li"},"my_number"),", dengan isi/item ditulis pada file ",(0,t.kt)("inlineCode",{parentName:"li"},"my_number/mod.rs")),(0,t.kt)("li",{parentName:"ul"},"Pembuatan submodule dengan nama ",(0,t.kt)("inlineCode",{parentName:"li"},"my_number/conversion_utility"),", dengan isi/item ditulis pada file ",(0,t.kt)("inlineCode",{parentName:"li"},"my_number/conversion_utility/mod.rs")),(0,t.kt)("li",{parentName:"ul"},"Penggunaan keyword ",(0,t.kt)("inlineCode",{parentName:"li"},"pub")," pada fungsi agar bisa diakses dari luar module"),(0,t.kt)("li",{parentName:"ul"},"Penggunaan keyword ",(0,t.kt)("inlineCode",{parentName:"li"},"pub")," pada submodule agar bisa diakses dari luar parent module"),(0,t.kt)("li",{parentName:"ul"},"Pengaksesan item milik module, yaitu: ",(0,t.kt)("inlineCode",{parentName:"li"},"my_io::read_entry"),", ",(0,t.kt)("inlineCode",{parentName:"li"},"my_number::conversion_utility::string_to_number"),", dan ",(0,t.kt)("inlineCode",{parentName:"li"},"my_number::is_odd_number"))),(0,t.kt)("h2",{id:"a207-pembahasan-lanjutan"},"A.20.7. Pembahasan lanjutan"),(0,t.kt)("p",null,"Pembahasan topik module dilanjutkan pada beberapa chapter lain. Pada chapter ",(0,t.kt)("a",{parentName:"p",href:"/basic/module-inline"},"Module System \u279c Inline Module")," kita akan bahas secara mendetail mengenai apa itu inline module dan perbedaannya dibanding normal module. Lalu nantinya di cahpter ",(0,t.kt)("a",{parentName:"p",href:"/basic/visibility-privacy"},"Module System \u279c Visibility & Privacy")," akan dibahas secara lengkap mengenai keyword ",(0,t.kt)("inlineCode",{parentName:"p"},"pub")," dan kontrol privasi lainnya di pemrograman Rust."),(0,t.kt)("hr",null),(0,t.kt)("h2",{id:"catatan-chapter-"},"Catatan chapter \ud83d\udcd1"),(0,t.kt)("h3",{id:"-source-code-praktik"},"\u25c9 Source code praktik"),(0,t.kt)("pre",null,(0,t.kt)("a",{href:"https://github.com/novalagung/dasarpemrogramanrust-example/tree/master/module_basic"},"github.com/novalagung/dasarpemrogramanrust-example/../module_basic")),(0,t.kt)("h3",{id:"-referensi"},"\u25c9 Referensi"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/book/ch07-02-defining-modules-to-control-scope-and-privacy.html"},"https://doc.rust-lang.org/book/ch07-02-defining-modules-to-control-scope-and-privacy.html")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/std/keyword.pub.html"},"https://doc.rust-lang.org/std/keyword.pub.html")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/std/keyword.mod.html"},"https://doc.rust-lang.org/std/keyword.mod.html")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/rust-by-example/mod.html"},"https://doc.rust-lang.org/rust-by-example/mod.html")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"https://aloso.github.io/2021/03/28/module-system.html"},"https://aloso.github.io/2021/03/28/module-system.html")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"https://stackoverflow.com/questions/69275034/what-is-the-difference-between-use-and-pub-use"},"https://stackoverflow.com/questions/69275034/what-is-the-difference-between-use-and-pub-use"))))}o.isMDXComponent=!0},5152:(e,a,n)=>{n.d(a,{Z:()=>i});const i=n.p+"assets/images/module-1-0eea2521d2399e73e455b90f5c2f97fa.png"},7050:(e,a,n)=>{n.d(a,{Z:()=>i});const i=n.p+"assets/images/module-2-d8f6f3862036da93c4b7920e144a3a3f.png"},3749:(e,a,n)=>{n.d(a,{Z:()=>i});const i=n.p+"assets/images/module-3-b8f34c47b905cadb9001a866ebb80809.png"},6827:(e,a,n)=>{n.d(a,{Z:()=>i});const i=n.p+"assets/images/module-4-e83e7a2e8d7d6d4d11ec121d6dc184d0.png"}}]);